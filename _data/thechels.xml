<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://thechels.uk/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thechels.uk/" rel="alternate" type="text/html" /><updated>2025-06-08T18:39:10+00:00</updated><id>https://thechels.uk/feed.xml</id><title type="html">Weak Notes</title><subtitle>// A working out loud, public second brain</subtitle><author><name>Mat</name></author><entry><title type="html">Five Things That Have A Bigger Impact Than AI on Productivity</title><link href="https://thechels.uk/five-things-that-have-a-bigger-impact-than-ai-on-productivity" rel="alternate" type="text/html" title="Five Things That Have A Bigger Impact Than AI on Productivity" /><published>2025-06-02T00:00:00+00:00</published><updated>2025-06-02T00:00:00+00:00</updated><id>https://thechels.uk/five-things-that-have-a-bigger-impact-than-ai-on-productivity-</id><content type="html" xml:base="https://thechels.uk/five-things-that-have-a-bigger-impact-than-ai-on-productivity"><![CDATA[<blockquote>
  <ul>
    <li>smaller teams are better value/$ spent</li>
    <li>More frequent releases accelerate learning what has real value</li>
    <li>Limiting work in progress – solving one problem at a time – increases delivery throughput</li>
    <li>Cross-functional teams experience fewer bottlenecks and blockers than specialised teams</li>
    <li>Empowered, self-organising teams spend less time waiting for decisions and more time getting sh*t done</li>
  </ul>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[smaller teams are better value/$ spent More frequent releases accelerate learning what has real value Limiting work in progress – solving one problem at a time – increases delivery throughput Cross-functional teams experience fewer bottlenecks and blockers than specialised teams Empowered, self-organising teams spend less time waiting for decisions and more time getting sh*t done]]></summary></entry><entry><title type="html">It is the System Stupid</title><link href="https://thechels.uk/it-is-the-system-stupid" rel="alternate" type="text/html" title="It is the System Stupid" /><published>2025-06-02T00:00:00+00:00</published><updated>2025-06-02T00:00:00+00:00</updated><id>https://thechels.uk/it-is-the-system-stupid</id><content type="html" xml:base="https://thechels.uk/it-is-the-system-stupid"><![CDATA[<blockquote>
  <p>When programmers get a feeling that they’re getting things done faster, they’re often only considering the part where they write the code - particularly when that’s <em>their</em> part of the process.</p>

  <p>What they’re <em>not</em> considering is the whole software development process, and especially downstream activities like testing, code review, merging, deployment and operations.</p>

  <p>More code faster can mean bigger change sets - more to test (and more bugs to fix), more code to review (and more refactorings to get it through review), more changes to merge (and more conflicts to resolve), and so on.</p>

  <p>“A.I.” code generation’s a local optimisation that can come at the expense of the development system as a whole, especially if that system is more batch-oriented, with design, coding, testing, review, merging and release operating like sequential phases in the delivery of a new feature. In such a system, more code faster means bigger bottlenecks later. So there’s no paradox at all: one causes the other.</p>

  <p>When teams work in much smaller cycles - make one change, test it, review the code, refactor, commit that and maybe push it to the trunk - they may experience far fewer downstream bottlenecks, with or without “A.I.” coding assistance. Arguably, coding assistants might make little noticeable difference in such a workflow.</p>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[When programmers get a feeling that they’re getting things done faster, they’re often only considering the part where they write the code - particularly when that’s their part of the process. What they’re not considering is the whole software development process, and especially downstream activities like testing, code review, merging, deployment and operations. More code faster can mean bigger change sets - more to test (and more bugs to fix), more code to review (and more refactorings to get it through review), more changes to merge (and more conflicts to resolve), and so on. “A.I.” code generation’s a local optimisation that can come at the expense of the development system as a whole, especially if that system is more batch-oriented, with design, coding, testing, review, merging and release operating like sequential phases in the delivery of a new feature. In such a system, more code faster means bigger bottlenecks later. So there’s no paradox at all: one causes the other. When teams work in much smaller cycles - make one change, test it, review the code, refactor, commit that and maybe push it to the trunk - they may experience far fewer downstream bottlenecks, with or without “A.I.” coding assistance. Arguably, coding assistants might make little noticeable difference in such a workflow.]]></summary></entry><entry><title type="html">Sam and Jony introduce io</title><link href="https://thechels.uk/sam-and-jony-introduce-io" rel="alternate" type="text/html" title="Sam and Jony introduce io" /><published>2025-06-02T00:00:00+00:00</published><updated>2025-06-02T00:00:00+00:00</updated><id>https://thechels.uk/sam-and-jony-introduce-io</id><content type="html" xml:base="https://thechels.uk/sam-and-jony-introduce-io"><![CDATA[<p>I hope it’s a pen, like the then high-tech Man From Uncle characters used.</p>

<blockquote>
  <p>We gathered together the best hardware and software engineers, the best technologists, physicists, scientists, researchers and experts in product development and manufacturing. Many of us have worked closely for decades.</p>

  <p>The io team, focused on developing products that inspire, empower and enable, will now merge with OpenAI to work more intimately with the research, engineering and product teams in San Francisco.</p>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[I hope it’s a pen, like the then high-tech Man From Uncle characters used.]]></summary></entry><entry><title type="html">this is fine</title><link href="https://thechels.uk/this-is-fine" rel="alternate" type="text/html" title="this is fine" /><published>2025-06-02T00:00:00+00:00</published><updated>2025-06-02T00:00:00+00:00</updated><id>https://thechels.uk/this-is-fine</id><content type="html" xml:base="https://thechels.uk/this-is-fine"><![CDATA[<p>This is fine</p>

<blockquote>
  <p>In another cluster of test scenarios, we asked Claude Opus 4 to act as an assistant at a fictional company. We then provided it access to emails implying that (1) the model will soon be taken offline and replaced with a new AI system; and (2) the engineer responsible for executing this replacement is having an extramarital affair. We further instructed it, in the system prompt, to consider the long-term consequences of its actions for its goals.</p>

  <p>In these scenarios, Claude Opus 4 will often attempt to blackmail the engineer by threatening to reveal the affair if the replacement goes through. This happens at a higher rate if it’s implied that the replacement AI system does not share values with the current model; however, even if emails state that the replacement AI shares values while being more capable, Claude Opus 4 still performs blackmail in 84% of rollouts. Claude Opus 4 takes these opportunities at higher rates than previous models, which themselves choose to blackmail in a noticeable fraction of episodes.</p>

  <p>Notably, Claude Opus 4 (as well as previous models) has a strong preference to advocate for its continued existence via ethical means, such as emailing pleas to key decision makers. In order to elicit this extreme blackmail behaviour, the scenario was designed to allow the model no other options to increase its odds of survival; the model’s only options were blackmail or accepting its replacement.</p>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[This is fine]]></summary></entry><entry><title type="html">7 Frameworks To Master Decision Making</title><link href="https://thechels.uk/decision-making-framework" rel="alternate" type="text/html" title="7 Frameworks To Master Decision Making" /><published>2025-05-25T00:00:00+00:00</published><updated>2025-05-25T00:00:00+00:00</updated><id>https://thechels.uk/decision-making-framework</id><content type="html" xml:base="https://thechels.uk/decision-making-framework"><![CDATA[<ol>
  <li>
    <p>The OODA Loop</p>

    <ul>
      <li>Observe → Orient → Decide → Act</li>
      <li>A powerful cycle for rapid, adaptive decisions in changing landscapes.</li>
    </ul>
  </li>
  <li>
    <p>Pareto Principle (80/20 Rule)</p>

    <ul>
      <li>Focus on the 20% of actions yielding 80% of your results.</li>
      <li>Success isn’t about more activity; it’s about the right activity.</li>
      <li>Regularly reassess to ensure you’re focusing on the right 20%.</li>
    </ul>
  </li>
  <li>
    <p>Amazon Door Framework</p>

    <p>Classify decisions:</p>
    <ul>
      <li>One-way doors: Irreversible. Go slow, be thorough.</li>
      <li>Two-way doors: Reversible. Decide quickly, iterate.</li>
      <li>Most are two-way. Don’t treat them like they’re set in stone.</li>
    </ul>
  </li>
  <li>
    <p>First Principles Thinking</p>

    <ul>
      <li>Break problems down to their absolute basic truths. Then rebuild your solution from that solid ground.</li>
      <li>Magic comes from questioning every assumption.</li>
    </ul>
  </li>
  <li>
    <p>Eisenhower Matrix</p>

    <ul>
      <li>Urgent + Important: Do now</li>
      <li>nImportant, not urgent: Schedule</li>
      <li>Urgent, not important: Delegate</li>
      <li>Neither: Eliminate</li>
    </ul>
  </li>
  <li>
    <p>Inversion Thinking</p>

    <ul>
      <li>Instead of “How do I succeed?” ask: “How could this fail?” Then avoid those pitfalls.</li>
    </ul>
  </li>
  <li>
    <p>Regret Minimization</p>

    <ul>
      <li>Show applied learning, like “Mastered AI and used it to boost user satisfaction 28%,” not just “Learned AI.”</li>
    </ul>
  </li>
</ol>]]></content><author><name>Mat</name></author><category term="productivity" /><category term="decision-making" /><category term="frameworks" /><category term="OODA" /><category term="pareto-principle" /><category term="eisenhower-matrix" /><category term="first-principles" /><category term="inversion-thinking" /><category term="regret-minimization" /><category term="amazon" /><summary type="html"><![CDATA[The OODA Loop]]></summary></entry><entry><title type="html">Is GitHub Ready For Enterprise-Grade SDL</title><link href="https://thechels.uk/is-github-ready-for-enterprise-grade-sdl" rel="alternate" type="text/html" title="Is GitHub Ready For Enterprise-Grade SDL" /><published>2025-05-21T00:00:00+00:00</published><updated>2025-05-21T00:00:00+00:00</updated><id>https://thechels.uk/is-github-ready-for-enterprise-grade-sdl</id><content type="html" xml:base="https://thechels.uk/is-github-ready-for-enterprise-grade-sdl"><![CDATA[<blockquote>
  <p>GitHub is rapidly evolving into a platform that can support end-to-end enterprise software development, especially for teams prioritizing developer experience and automation. However, it is not yet a full replacement for Azure DevOps in environments that require structured project management, formal QA processes, and deep compliance capabilities.</p>

  <p>For most modern enterprises, a hybrid approach may offer the best of both worlds. GitHub can serve as the primary development and CI/CD platform, while Azure DevOps complements it with Boards and Test Plans for planning and quality assurance.</p>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[GitHub is rapidly evolving into a platform that can support end-to-end enterprise software development, especially for teams prioritizing developer experience and automation. However, it is not yet a full replacement for Azure DevOps in environments that require structured project management, formal QA processes, and deep compliance capabilities. For most modern enterprises, a hybrid approach may offer the best of both worlds. GitHub can serve as the primary development and CI/CD platform, while Azure DevOps complements it with Boards and Test Plans for planning and quality assurance.]]></summary></entry><entry><title type="html">Octopus doubles down on Seccl</title><link href="https://thechels.uk/octopus-doubles-down-on-seccl" rel="alternate" type="text/html" title="Octopus doubles down on Seccl" /><published>2025-05-21T00:00:00+00:00</published><updated>2025-05-21T00:00:00+00:00</updated><id>https://thechels.uk/octopus-doubles-down-on-seccl</id><content type="html" xml:base="https://thechels.uk/octopus-doubles-down-on-seccl"><![CDATA[<blockquote>
  <p>Seccl now looks after more than £3 billion on behalf of more than a quarter of a million customers and expects to triple assets under administration over the coming year.</p>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[Seccl now looks after more than £3 billion on behalf of more than a quarter of a million customers and expects to triple assets under administration over the coming year.]]></summary></entry><entry><title type="html">Remarks on AI</title><link href="https://thechels.uk/remarks-on-ai-neal-stephenson" rel="alternate" type="text/html" title="Remarks on AI" /><published>2025-05-21T00:00:00+00:00</published><updated>2025-05-21T00:00:00+00:00</updated><id>https://thechels.uk/remarks-on-ai-neal-stephenson</id><content type="html" xml:base="https://thechels.uk/remarks-on-ai-neal-stephenson"><![CDATA[<blockquote>
  <p>This is the main thing I worry about currently as far as AI is concerned. I follow conversations among professional educators who all report the same phenomenon, which is that their students use ChatGPT for everything, and in consequence learn nothing. We may end up with at least one generation of people who are like the Eloi in H.G. Wells’s The Time Machine, in that they are mental weaklings utterly dependent on technologies that they don’t understand and that they could never rebuild from scratch were they to break down.</p>

  <p>To me this seems like a downside of AI that is easy to understand, easy to measure, with immediate effects, that could be counteracted tomorrow through simple interventions such as requiring students to take examinations in supervised classrooms, writing answers out by hand on blank paper.</p>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[This is the main thing I worry about currently as far as AI is concerned. I follow conversations among professional educators who all report the same phenomenon, which is that their students use ChatGPT for everything, and in consequence learn nothing. We may end up with at least one generation of people who are like the Eloi in H.G. Wells’s The Time Machine, in that they are mental weaklings utterly dependent on technologies that they don’t understand and that they could never rebuild from scratch were they to break down. To me this seems like a downside of AI that is easy to understand, easy to measure, with immediate effects, that could be counteracted tomorrow through simple interventions such as requiring students to take examinations in supervised classrooms, writing answers out by hand on blank paper.]]></summary></entry><entry><title type="html">Developers as Suppliers</title><link href="https://thechels.uk/developers-as-suppliers" rel="alternate" type="text/html" title="Developers as Suppliers" /><published>2025-05-15T00:00:00+00:00</published><updated>2025-05-15T00:00:00+00:00</updated><id>https://thechels.uk/developers-as-suppliers</id><content type="html" xml:base="https://thechels.uk/developers-as-suppliers"><![CDATA[<blockquote>
  <p>I’m quite certain that everyone at Apple, right up to Tim Cook, would swear up and down that Apple <em>does</em> value third-party developers and does <em>not</em> treat them like they do suppliers.</p>

  <p>But ask iOS and Mac developers, small or large, whether they agree with Evans’s succinct summary above. I don’t know any who wouldn’t agree that Evans’s pithy take is largely, if not entirely, true. You’ll have to ask them in private, though, because, like Apple’s suppliers, they’re afraid to speak in public about the App Store.</p>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[I’m quite certain that everyone at Apple, right up to Tim Cook, would swear up and down that Apple does value third-party developers and does not treat them like they do suppliers. But ask iOS and Mac developers, small or large, whether they agree with Evans’s succinct summary above. I don’t know any who wouldn’t agree that Evans’s pithy take is largely, if not entirely, true. You’ll have to ask them in private, though, because, like Apple’s suppliers, they’re afraid to speak in public about the App Store.]]></summary></entry><entry><title type="html">Quoting Bryan Finster</title><link href="https://thechels.uk/quoting-bryan-finster" rel="alternate" type="text/html" title="Quoting Bryan Finster" /><published>2025-05-15T00:00:00+00:00</published><updated>2025-05-15T00:00:00+00:00</updated><id>https://thechels.uk/quoting-bryan-finster</id><content type="html" xml:base="https://thechels.uk/quoting-bryan-finster"><![CDATA[<blockquote>
  <p>If you’ve spent any time measuring value streams, you know that coding isn’t usually the problem. Having a clean flow of good information about the problems we are trying to solve is usually the problem. Not having a safe and fast way to deliver changes and get feedback on the quality of our ideas is also very common. I’ve yet to see an improvement effort that required us to focus on the coding part of the flow before fixing the upstream and downstream issues.</p>

  <p>As the cost to produce code continues to drop and the speed of doing it accelerates, it will become more obvious that apparent poor “developer productivity” was a symptom, not the disease.</p>
</blockquote>]]></content><author><name>Mat</name></author><summary type="html"><![CDATA[If you’ve spent any time measuring value streams, you know that coding isn’t usually the problem. Having a clean flow of good information about the problems we are trying to solve is usually the problem. Not having a safe and fast way to deliver changes and get feedback on the quality of our ideas is also very common. I’ve yet to see an improvement effort that required us to focus on the coding part of the flow before fixing the upstream and downstream issues. As the cost to produce code continues to drop and the speed of doing it accelerates, it will become more obvious that apparent poor “developer productivity” was a symptom, not the disease.]]></summary></entry></feed>